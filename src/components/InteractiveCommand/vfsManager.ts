// Shared Virtual File System Manager for InteractiveCommand components
// This allows files generated by one command to be used by subsequent commands

class VFSManager {
  private files: Record<string, Uint8Array> = {};
  private listeners: Set<(files: Record<string, Uint8Array>) => void> = new Set();

  // Add files to the VFS
  addFiles(newFiles: Record<string, Uint8Array>) {
    this.files = { ...this.files, ...newFiles };
    this.notifyListeners();
  }

  // Get all files
  getFiles(): Record<string, Uint8Array> {
    return { ...this.files };
  }

  // Get a specific file
  getFile(path: string): Uint8Array | undefined {
    return this.files[path];
  }

  // Check if a file exists
  hasFile(path: string): boolean {
    return path in this.files;
  }

  // Write a single file
  writeFile(path: string, content: Uint8Array) {
    this.files[path] = content;
    this.notifyListeners();
  }

  // Remove a file
  removeFile(path: string) {
    delete this.files[path];
    this.notifyListeners();
  }

  // Clear all files
  clear() {
    this.files = {};
    this.notifyListeners();
  }

  // Subscribe to file changes
  subscribe(listener: (files: Record<string, Uint8Array>) => void) {
    this.listeners.add(listener);
    return () => this.listeners.delete(listener);
  }

  // Notify all listeners of changes
  private notifyListeners() {
    this.listeners.forEach(listener => listener(this.getFiles()));
  }

  // Get list of file paths
  getFilePaths(): string[] {
    return Object.keys(this.files);
  }
}

// Singleton instance
export const vfsManager = new VFSManager();
